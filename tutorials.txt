Title: tutorials.txt
By: Mason Brill
Desc: This file contains what I have learned through creating Goldstone with Unity, C#, and WebGL.
Most of the entries will focus on C# code, but will also include information on the unity game
engine as well. The entries will go in order from what I learned first, to most recent. This
should help gauge where you might find certain information. These entries will all be in
reference to creating a 2-Dimensional game.

When first loading up unity, it can be a bit overwhelming. This is in the nature of all creative
software(Adobe Photoshop, Unity, Unreal Engine, Sony Vegas). There does exist harmony within
this apparent mess. My worry is that as time goes on, these examples will not stay up to date
as the Unity software changes. To combat this issue, some of my explainations may come across as
general or ambigious. We will start with the overall layout of the Unity UI.

UNITY LAYOUT
------------
On the left, there will be all files/objects that exist within the current game. Games are also
referred to as scenes. At the bottom there are the actual game files, the difference here is you
can reuse whatever is in the file system, inside your scene. So if you have some picture you want
to reuse, you can just drag and drop multiple instances into the scene. You will see these
different instances of whatever you have dragged and dropped from the file system in your scenes
files. If you were to click on something in the scene, it will pop up what is called the inspector.
This tells you all of the properties for the currently selected object within the scene. 
Each property is what is called a component. You can easily add more components within the
inspector. This will be what we discuss first.

COMPONENTS
----------
For example, lets say you are working on a 2D game(how ironic), and you want to add in
a building. So you first grab some picture of a building online(make sure you aren't pirating...),
and then you drag and drop it into your games files. From here you drag it into your scene, the
only problem is that the user can easily walk through this building! You will add a component to
this picture within the inspector tab. All you need is to add a component, search for box collider
2D, and add this as a component. There exist many different components to be added to objects
within your scene. There also exist properties within these components that we can also reference
in scripts.

ADDING A PLAYER WITH MOVEMENT
-----------------------------
In order to add a player, you will first need to add some sort of object to your scene. Then you
will need to add some components, a rigidbody 2D, sprite renderer, box collider 2D, and a blank
script. I believe it goes without saying, but Unity uses C#. We will first create three variables

	private float horizontal = 0;
	private float vertical = 0;
	private float speed = 3f;

These will keep track of the players position and movement speed. Next we will need to declare
a Rigidbody2D variable. This will be what is actually moved in the game. We will also need to
assign the scripts "rb" object in the inspector to the player object that can be found in the
games scene files. Just drag and drop this object in the games scene files over to the inspector
where you can find the script and you will see the "rb" variable here.

	[SerializeField] private Rigidbody2D rb;

Now we will need to add some lines inside the Update() function. These lines will allow the
game to track if WASD or any of the arrow keys are pressed.

	horizontal = Input.GetAxisRaw("Horizontal");
	vertical = Input.GetAxisRaw("Vertical");

Now that we can check if any of these keys are pressed, we can have the rigid body variable
move its position based on if these are pressed. These lines will be outside of the Update()
function.

	void FixedUpdate()
	{
		rb.velocity = new Vector2(horizontal * speed,vertical * speed);
	}

Another important property to mention for players with movement is rotation. When I was
first making a player with movement, and I had a building, when I would walk into the
building and rub against one of the cornors of the box collider, my sprite would
start rotating in a circle and would not stop. This is of course due to Unitys physics
engine, but is not desirble in my case. So, all you need to do is set the "freezeRotation"
property of the rigid body in the "Start()" function to "true" like so.

	void Start()
	{
		rb.freezeRotation = true;
	}

Note that "rb" is the variable name that I gave to my "Rigidbody2D"
variable. Your variable name may be different.


CAMERA MOVING WITH PLAYER
-------------------------
Like just about every game ever, we want the main camera to move with
the player. This will probably be the easist script to write ever. All
we need to do is assign a script to the main camera, declare two
Rigidbody2D variable's, assign one to the camera, and one to the player
and then just assign the camera's x and y coordinates to the player's
in the update function.

	[SerializeField] private Rigidbody2D player;
	[SerializeField] private Rigidbody2D mainCamera;

	void Update()
	{
		mainCamera.position = new Vector2(player.position.x, player.position.y);
	}

SPRITES
-------
Of course I wanted to add animations to our player as well. First, you are going to need
to get some sort of pictures you want for your player to be, along with other pictures
for the player's movement animations. The pictures are typically referred to as sprites.
This is just a fancy word for picture. Just simply look up online for something like,
"viking character sprite sheet", or "army soldier sprite sheet". This will pop up with
a picture of many different characters within them. A sprite sheet is basically a picture,
of a bunch of other pictures. You will need to cut this sprite sheet to create many
smaller files. You can use an online tool for this. Once this is done, you will now have
all of the sprites to be used for your character. For starters, I would recommend adding a
sprite renderer component to your player object in Unity. Then assign one of your sprites
to it. This will be the sprite that shows when your character is not moving. So you will
probably want to choose some sort of sprite that looks like they are just standing still.
From here, you will need to add an "Animator" component to your player object. This is 
what will be used to give your player the movement animation. First we will need to create
the animation, and then have it play when the player is moving.

CREATING AN ANIMATION
---------------------
When creating an animation, you need to have all the sprites you want to use in the games
files. Once they are here, highlight all the spites you want to use in your animation.
Then drag all of these sprites into the game scene. This will open a new window asking
you to save this new animation. Once this done, you will also notice an "animator
controller" has been made in the same location as the animation. Open up this animatior
controller. You will see some boxes with arrows. Rename the box that has your animation
name, with something like "playerIdle". Right click on some empty space and add a new
empty state. Do this for a total of four states. Name them something like "playerRight",
and "playerUp". Now we will need to add two transistions between each of these four
states, and our idle state. You can do this by right clciking on a state. Be sure to
have one going to the non-idle state, and one from the non-idle state, to the idle state.
We now need to add "conditions" and "parameters". In the window to the left, you should
see a tab titled "Layers", and another titled "parameters". Click on the parameters tab
and add four parameters. Again, name these something like "isDown", or "isRight". Give
them the data type of bool. Once you have made all four of these, click back on each
transistion and add each one of these parameters under the "Conditions" section in the
inspector. Set them to their respective tru and false values based on if the arrow is
going to or away from the state. Next we need to go back into our player movement script,
and declare an "Animator" variable outside of the "Start()" function.

	private Animator animator;

We will then go inside the "Update()" function, and we will check if the horizontal value
is greater than, or less than 0, and the same with the vertical value. It will look like
this.

	if(vertical > 0)
        {
            animator.SetBool("isUp", true);
        }
        else
        {
            animator.SetBool("isUp", false);
        }

        if(vertical < 0)
        {
            animator.SetBool("isDown", true);
        }
        else
        {
            animator.SetBool("isDown", false);
        }

Also, make sure that the names in the quotations, match up with the names you gave
to your parameters inside of the animator tab. It will not work if these don't match.
Do the same with horizontal. Now we can close out of the script and we will need to go
back into our inspector for the object that has the script attached to it. Inside the
animator component of this object, be sure to assign the controller, to the animator
controller that was also created when we created the animation. If this is your first
animation in your game, there should only be one option anyway. Now run your game and
see if your animation works.

TEXT ON SCREEN
--------------
